class CommonMap {
  constructor($commonMap) {
    this.commonMap = $commonMap;

    this.setupMap();
  }

  setupMap() {
    this.coffeeHouses = JSON.parse(this.commonMap.dataset.coffeeHouses);
    this.map = new google.maps.Map(this.commonMap, this.mapOptions());

    this.createUserMarker();
    this.addCoffeeHousesMarkers();
    this.bindEvents();
  }

  bindEvents() {
    document.addEventListener('position:update', () => this.updateUserMarker());
  }

  mapOptions() {
    return {
      zoom: 15,
      center: new google.maps.LatLng(KAZAN_LATITUDE, KAZAN_LONGITUDE)
    };
  }

  addCoffeeHousesMarkers() {
    [...this.coffeeHouses].forEach((coffeeHouse) => {
      const marker = new (google.maps.Marker)({
        position: new google.maps.LatLng(coffeeHouse.latitude, coffeeHouse.longitude),
        icon: "<%= asset_path('coffee_house_marker.png') %>",
        map: this.map
      });

      marker.addListener("click", () => {
        const infoWindow = new google.maps.InfoWindow({
          content: this.windowContent(coffeeHouse)
        });
        infoWindow.open(this.map, marker);
      });
    });
  }

  windowContent(coffeeHouse) {
    const content = `<a href="${this.coffeeHouseLink(coffeeHouse)}">${coffeeHouse.name}</a>`

    return coffeeHouse.description.length > 0 ? `${content}<p>${coffeeHouse.description}</p>` : content
  }

  coffeeHouseLink(coffeeHouse) {
    return `/coffee_houses/${coffeeHouse.id}`
  }

  getUserCoordinates() {
    return new google.maps.LatLng(App.currentCoordinates.latitude, App.currentCoordinates.longitude);
  }

  createUserMarker() {
    const userLatLng = this.getUserCoordinates();

    this.map.setCenter(userLatLng);
    this.userMarker = new (google.maps.Marker)({
      position: userLatLng,
      icon: "<%= asset_path('user_marker.png') %>",
      map: this.map
    });
  }

  updateUserMarker() {
    const userLatLng = this.getUserCoordinates();

    this.map.setCenter(userLatLng);
    this.userMarker.setPosition(userLatLng);
  }
}

const COMMON_MAP_SELECTOR = "common-map";
const $commonMaps = document.getElementsByClassName(COMMON_MAP_SELECTOR);

[...$commonMaps].forEach(($commonMap) => {
  new CommonMap($commonMap);
});
